#!/usr/bin/env stack
-- stack --resolver lts-10.2 script

{-# OPTIONS_GHC -Wall #-}

module Main where

import Data.List.Split (splitOn)

data Tile = Tile {id :: Int, borders :: [String]}

parse :: String -> [(Int, [String])]
parse s = rawTiles
  where
    rawTiles = pt . lines <$> splitOn "\n\n" s
    pt l = (tilenum $ head l, tail l)
    tilenum x = read . filter (/= ':') $ (!! 1) . words $ x

-- >>> parse "Tile 2311:\n..##.#..#.\n##..#.....\n#...##..#.\n####.#...#\n##.##.###.\n##...#.###\n.#.#.#..##\n..#....#..\n###...#.#.\n..###..###\n\nTile 1951:\n#.##...##.\n#.####...#\n.....#..##\n#...######\n.##.#....#\n.###.#####\n###.##.##.\n.###....#.\n..#.#..#.#\n#...##.#..\n\nTile 1171:\n####...##.\n#..##.#..#\n##.#..#.#.\n.###.####.\n..###.####\n.##....##.\n.#...####.\n#.##.####.\n####..#...\n.....##...\n\nTile 1427:\n###.##.#..\n.#..#.##..\n.#.##.#..#\n#.#.#.##.#\n....#...##\n...##..##.\n...#.#####\n.#.####.#.\n..#..###.#\n..##.#..#.\n\nTile 1489:\n##.#.#....\n..##...#..\n.##..##...\n..#...#...\n#####...#.\n#..#.#.#.#\n...#.#.#..\n##.#...##.\n..##.##.##\n###.##.#..\n\nTile 2473:\n#....####.\n#..#.##...\n#.##..#...\n######.#.#\n.#...#.#.#\n.#########\n.###.#..#.\n########.#\n##...##.#.\n..###.#.#.\n\nTile 2971:\n..#.#....#\n#...###...\n#.#.###...\n##.##..#..\n.#####..##\n.#..####.#\n#..#.#..#.\n..####.###\n..#.#.###.\n...#.#.#.#\n\nTile 2729:\n...#.#.#.#\n####.#....\n..#.#.....\n....#..#.#\n.##..##.#.\n.#.####...\n####.#.#..\n##.####...\n##..#.##..\n#.##...##.\n\nTile 3079:\n#.#.#####.\n.#..######\n..#.......\n######....\n####.#..#.\n.#...#.##.\n#.#####.##\n..#.###...\n..#.......\n..#.###..."
-- [(2311,["..##.#..#.","##..#.....","#...##..#.","####.#...#","##.##.###.","##...#.###",".#.#.#..##","..#....#..","###...#.#.","..###..###"]),(1951,["#.##...##.","#.####...#",".....#..##","#...######",".##.#....#",".###.#####","###.##.##.",".###....#.","..#.#..#.#","#...##.#.."]),(1171,["####...##.","#..##.#..#","##.#..#.#.",".###.####.","..###.####",".##....##.",".#...####.","#.##.####.","####..#...",".....##..."]),(1427,["###.##.#..",".#..#.##..",".#.##.#..#","#.#.#.##.#","....#...##","...##..##.","...#.#####",".#.####.#.","..#..###.#","..##.#..#."]),(1489,["##.#.#....","..##...#..",".##..##...","..#...#...","#####...#.","#..#.#.#.#","...#.#.#..","##.#...##.","..##.##.##","###.##.#.."]),(2473,["#....####.","#..#.##...","#.##..#...","######.#.#",".#...#.#.#",".#########",".###.#..#.","########.#","##...##.#.","..###.#.#."]),(2971,["..#.#....#","#...###...","#.#.###...","##.##..#..",".#####..##",".#..####.#","#..#.#..#.","..####.###","..#.#.###.","...#.#.#.#"]),(2729,["...#.#.#.#","####.#....","..#.#.....","....#..#.#",".##..##.#.",".#.####...","####.#.#..","##.####...","##..#.##..","#.##...##."]),(3079,["#.#.#####.",".#..######","..#.......","######....","####.#..#.",".#...#.##.","#.#####.##","..#.###...","..#.......","..#.###..."])]

solve :: String -> (Int, Int)
solve s = (first, second)
  where
    first = length $ parse s
    second = 2

main :: IO ()
main = readFile "input/day20.txt" >>= print . solve